{
    "allOf with if-then-else": {
        "allOf": [
            {
                "type": "null"
            },
            {
                "else": {},
                "if": {
                    "type": "boolean"
                },
                "then": {
                    "type": "boolean"
                }
            }
        ]
    },
    "array of several unique jsonpointers": {
        "items": {
            "format": "json-pointer",
            "type": "string"
        },
        "minItems": 2,
        "type": "array",
        "uniqueItems": true
    },
    "array of several unique relative jsonpointers": {
        "items": {
            "format": "relative-json-pointer",
            "type": "string"
        },
        "minItems": 2,
        "type": "array",
        "uniqueItems": true
    },
    "array where contains can be merged with list-items": {
        "additionalItems": {
            "type": "string"
        },
        "contains": {
            "const": "abc"
        },
        "items": [
            {
                "type": "string"
            }
        ],
        "type": "array"
    },
    "array where contains cannot be merged with items": {
        "contains": {
            "pattern": ".",
            "type": "string"
        },
        "items": {
            "pattern": "..",
            "type": "string"
        },
        "type": "array"
    },
    "array where contains cannot be merged with list-items": {
        "additionalItems": {
            "pattern": "...",
            "type": "string"
        },
        "contains": {
            "pattern": ".",
            "type": "string"
        },
        "items": [
            {
                "pattern": "..",
                "type": "string"
            }
        ],
        "type": "array"
    },
    "array with list items and too-high maxItems": {
        "additionalItems": false,
        "items": [
            {}
        ],
        "maxItems": 3,
        "type": "array"
    },
    "close bounds for integers with multiple and exMax": {
        "exclusiveMaximum": 1,
        "minimum": 0,
        "multipleOf": 2,
        "type": "integer"
    },
    "custom jsonpointer strategy is valid": {
        "format": "json-pointer",
        "type": "string"
    },
    "disallowed object but allows other type": {
        "maxProperties": 1,
        "required": [
            "0",
            "1"
        ],
        "type": [
            "null",
            "object"
        ]
    },
    "float bounds that are not floats": {
        "maximum": 18014398509481983,
        "minimum": -18014398509481983
    },
    "impossible integer or valid number": {
        "maximum": 1.9,
        "minimum": 1.2,
        "type": [
            "integer",
            "number"
        ]
    },
    "integer with numeric maximum and exclusiveMaximum": {
        "exclusiveMaximum": 0,
        "maximum": 1
    },
    "integer with numeric minimum and exclusiveMinimum": {
        "exclusiveMinimum": 1,
        "minimum": 0
    },
    "issue12-longer": {
        "additionalProperties": false,
        "properties": {
            "id": {
                "pattern": "^\\d+$",
                "type": "string"
            },
            "title": {
                "enum": [
                    "theonlyvalue"
                ],
                "type": "string"
            },
            "value": {
                "additionalProperties": false,
                "properties": {
                    "flag": {
                        "type": "boolean"
                    },
                    "ids": {
                        "items": {
                            "pattern": "^\\d+$",
                            "type": "string"
                        },
                        "minItems": 1,
                        "type": "array",
                        "uniqueItems": true
                    },
                    "string": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    }
                },
                "required": [
                    "ids",
                    "flag",
                    "string"
                ],
                "type": "object"
            }
        },
        "required": [
            "title",
            "value",
            "id"
        ],
        "type": "object"
    },
    "issue12-simple": {
        "additionalProperties": false,
        "properties": {
            "ids": {
                "items": {
                    "pattern": "^\\d+$",
                    "type": "string"
                },
                "minItems": 1,
                "type": "array",
                "uniqueItems": true
            }
        },
        "required": [
            "ids"
        ],
        "type": "object"
    },
    "non-integer numbers only": {
        "not": {
            "type": "integer"
        },
        "type": "number"
    },
    "object with dependencies and size limits so only one key is allowed": {
        "additionalProperties": false,
        "dependencies": {
            "a": [
                "b"
            ]
        },
        "maxProperties": 1,
        "minProperties": 1,
        "properties": {
            "a": true,
            "b": true
        },
        "type": "object"
    },
    "ref in array additionalItems": {
        "additionalProperties": false,
        "definition": {
            "type": "string"
        },
        "properties": {
            "something-else": {
                "additionalItems": {
                    "$ref": "#/definition"
                },
                "items": [
                    {
                        "type": "number"
                    }
                ],
                "type": "array"
            }
        },
        "type": "object"
    },
    "ref in array contains": {
        "additionalProperties": false,
        "definition": {
            "pattern": "\\d",
            "type": "string"
        },
        "properties": {
            "something": {
                "contains": {
                    "$ref": "#/definition"
                },
                "items": {
                    "type": "string"
                },
                "type": "array"
            }
        },
        "type": "object"
    },
    "ref in array items": {
        "additionalProperties": false,
        "definition": {
            "type": "string"
        },
        "properties": {
            "something": {
                "items": {
                    "$ref": "#/definition"
                },
                "type": "array"
            }
        },
        "type": "object"
    },
    "ref in nested object properties": {
        "additionalProperties": false,
        "definitions": {
            "another": {
                "type": "object"
            }
        },
        "properties": {
            "something": {
                "properties": {
                    "another": {
                        "$ref": "#/definitions/another"
                    }
                },
                "type": "object"
            }
        }
    },
    "relative jsonpointer strategy is valid": {
        "format": "relative-json-pointer",
        "type": "string"
    },
    "string with format and pattern": {
        "format": "email",
        "pattern": "^\\w+@",
        "type": "string"
    },
    "string with unknown format": {
        "format": "Unknown formats should be treated as annotations and pass validation",
        "type": "string"
    },
    "unique array with list-items and required additionalItems": {
        "additionalItems": {
            "const": 2
        },
        "items": [
            {
                "const": 1
            }
        ],
        "minItems": 2,
        "type": "array",
        "uniqueItems": true
    },
    "unique array with list-items without additionalItems": {
        "items": [
            {}
        ],
        "maxItems": 1,
        "type": "array",
        "uniqueItems": true
    },
    "unmergable allOf schema can still be resolved": {
        "allOf": [
            {
                "patternProperties": {
                    ".": {}
                }
            },
            {
                "patternProperties": {
                    "ab": {
                        "type": "boolean"
                    }
                }
            }
        ]
    },
    "very rarely satisfied contains requires contains-aware instance generation": {
        "contains": {
            "const": "A"
        },
        "items": {
            "type": "string"
        },
        "type": "array"
    }
}