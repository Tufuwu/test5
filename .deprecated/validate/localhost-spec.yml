meta:
  name: Verify CK on Localhost
  description: |
    Verifies that CK on localhost passes integration tests
  mkdocs:
    destination:
      - "validations/ck/localhost.md"

matrix:
  snap_version:
    # - 1.19/edge
    - 1.18/edge
    # - 1.17/edge
    # - 1.16/edge
    # - 1.15/edge
  series:
    # - focal
    - bionic
  channel:
    - edge

concurrent: no

plan:
  env:
    - JUJU_CONTROLLER=validate-ck-localhost
    - JUJU_MODEL=validate-localhost
    - JUJU_CLOUD=us-east-2
    - JUJU_DEPLOY_CHANNEL=$CHANNEL
  pre-execute: |
    #!/bin/bash
    . $WORKSPACE/cilib.sh

    setup_env

    juju bootstrap aws/us-east-2 $JUJU_CONTROLLER \
         -d $JUJU_MODEL \
         --bootstrap-series $SERIES \
         --force \
         --bootstrap-constraints arch="amd64" \
         --model-default test-mode=true \
         --model-default resource-tags=owner=k8sci \
         --model-default image-stream=daily

    juju deploy -m $JUJU_CONTROLLER:$JUJU_MODEL \
        --series $SERIES \
        --force \
        --constraints "mem=32G root-disk=100G cores=8" \
        ubuntu

    timeout 45m juju-wait -e $JUJU_CONTROLLER:$JUJU_MODEL -w


    ansible-playbook -i $(unitAddress ubuntu), \
                     --ssh-common-args '-o StrictHostKeyChecking=no' \
                     --key-file /var/lib/jenkins/.local/share/juju/ssh/juju_id_rsa \
                     -u ubuntu \
                     $WORKSPACE/jobs/validate/playbooks/single-system.yml

  post-execute: |
    #!/bin/bash
    set -x

    . $WORKSPACE/cilib.sh

    inject_env

    juju ssh -m "$JUJU_CONTROLLER":"$JUJU_MODEL" --pty=true ubuntu/0 -- /snap/bin/juju-crashdump -s -a debug-layer -a config -m "$JUJU_CONTROLLER:$JUJU_MODEL"
    juju scp -m "$JUJU_CONTROLLER":"$JUJU_MODEL" -- -r ubuntu/0:juju-crashdump* $OGC_JOB_WORKDIR/. || true
    juju scp -m "$JUJU_CONTROLLER":"$JUJU_MODEL" -- -r ubuntu/0:jenkins/*.log $OGC_JOB_WORKDIR/. || true
    juju scp -m "$JUJU_CONTROLLER":"$JUJU_MODEL" -- -r ubuntu/0:jenkins/*.xml $OGC_JOB_WORKDIR/. || true
    juju scp -m "$JUJU_CONTROLLER":"$JUJU_MODEL" -- -r ubuntu/0:jenkins/*.xls $OGC_JOB_WORKDIR/. || true

    teardown_env

  execute: |
    #!/bin/bash
    set -eu

    . $WORKSPACE/cilib.sh

    inject_env

    tee overlay.yaml <<EOF> /dev/null
    series: $SERIES
    applications:
      kubernetes-master:
        options:
          channel: $SNAP_VERSION
          proxy-extra-args: "proxy-mode=userspace"
      kubernetes-worker:
        options:
          channel: $SNAP_VERSION
          proxy-extra-args: "proxy-mode=userspace"
    EOF


    tee setup <<EOF> /dev/null
    #!/bin/bash
    set -eux
    export PATH=/snap/bin:$PATH
    export JUJU_CONTROLLER=$JUJU_CONTROLLER
    export JUJU_MODEL=$JUJU_MODEL
    export JUJU_CLOUD=$JUJU_CLOUD
    export JUJU_DEPLOY_CHANNEL=$JUJU_DEPLOY_CHANNEL
    export SERIES=$SERIES

    juju bootstrap localhost/localhost \
        $JUJU_CONTROLLER \
        -d $JUJU_MODEL \
        --bootstrap-series $SERIES \
        --force \
        --model-default image-stream=daily

    juju deploy -m "$JUJU_CONTROLLER":"$JUJU_MODEL" \
        --channel $JUJU_DEPLOY_CHANNEL \
        --force \
        --overlay overlay.yaml \
        cs:~containers/charmed-kubernetes 1>&2

    timeout 45m juju-wait -e $JUJU_CONTROLLER:$JUJU_MODEL -w

    pushd jenkins
    timeout 2h tox --workdir .tox -e py3 -- pytest \
        jobs/integration/validation.py \
        --cloud localhost/localhost \
        --model $JUJU_MODEL \
        --controller $JUJU_CONTROLLER
    popd

    EOF

    chmod +x setup
    juju scp -m "$JUJU_CONTROLLER":"$JUJU_MODEL" setup ubuntu/0:setup
    juju scp -m "$JUJU_CONTROLLER":"$JUJU_MODEL" overlay.yaml ubuntu/0:overlay.yaml
    juju ssh -m "$JUJU_CONTROLLER":"$JUJU_MODEL" --pty=true ubuntu/0 -- 'bash setup'
