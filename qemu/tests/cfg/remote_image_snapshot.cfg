# Network storage backends:
#   iscsi_direct
#   ceph
#   gluster_direct
#   nbd
#   libcurl (read-only)
#   libssh (read-only)
# These tcs only focus on the following scenarios:
#   remote image -> local snapshot
#   remote image -> remote snapshot

- remote_image_snapshot:
    only iscsi_direct ceph gluster_direct nbd libcurl libssh
    virt_test_type = qemu
    type = qemu_disk_img_info
    image_chain= "image1 snA"
    kill_vm = yes
    start_vm = no
    image_size = 20G
    md5sum_bin = "md5sum"
    tmp_dir = /var/tmp
    tmp_file_name = ${tmp_dir}/test.img
    force_create_image = no
    dd_bs_val = 1
    dd_bs_count = 256
    file_create_cmd = "dd if=/dev/urandom of=%s bs=${dd_bs_val}M count=${dd_bs_count}"
    guest_file_name_image1 = "${tmp_dir}/test.img"
    image_name_snA = "images/snA"
    image_format_snA = "qcow2"
    guest_file_name_snA = "${tmp_dir}/snA"
    backing_chain = yes
    Windows:
        guest_file_name_image1 = "C:\test.img"
        guest_file_name_snA = "C:\snA"
        x86_64:
            sync_bin = WIN_UTILS:\Sync\sync64.exe /accepteula
        i386, i686:
            sync_bin = WIN_UTILS:\Sync\sync.exe /accepteula
    iscsi_direct:
        # Never set size for the whole block is used
        image_size_snA = ""
    variants:
        - to_local:
            enable_iscsi_snA = no
            enable_ceph_snA = no
            enable_gluster_snA = no
            enable_nbd_snA = no
            enable_curl_snA = no
            enable_ssh_snA = no
            image_raw_device_snA = no
            storage_type_snA = filesystem
            libcurl, libssh:
                image_readonly_snA = no
        - to_remote:
            no nbd libcurl libssh
            iscsi_direct:
                # make sure size of lun_snA equals to size of lun_image1
                # hard code here for avocado-vt cannot select luns by now
                lun_snA = 1
            ceph:
                # qcow2 is supported since 4.1.0 on ceph
                required_qemu = [4.1.0,)
