# Network storage backends:
#   nbd
#
# The following testing scenarios are covered:
#   - with_nmap
#     Create a local image with qemu-img
#     Export it with qemu-nbd
#     Scan the port
#   - with_guestfish
#     Access system image with guestfish without booting up vm
#   - with_qemu_io.drop_connection
#     Create a local image with qemu-img
#     Export it with qemu-nbd
#     Access nbd image with qemu-io -c 'quit'
#   - with_qemu_io.drop_sync
#     Create a text file with echo
#     Export it with qemu-nbd
#     Access nbd image with qemu-io -c 'read'
#   - with_unix_socket
#     Clone system image with qemu-img
#     Export it with qemu-nbd(unix socket access)
#     Boot VM from the exported image
#   - with_ncat
#     Clone system image with qemu-img
#     Add it into VM(without device driver)
#     Export it with internal NBD server
#     Access it with ncat
#     Boot from the exported nbd image

- access_with_remote_storage:
    only nbd
    virt_test_type = qemu
    start_vm = 'no'

    # The following is specified for a local image 'stg0',
    # used for qemu-nbd export with ip access
    local_image_tag = 'stg0'
    image_name_stg0 = images/stg0
    enable_nbd_stg0 = 'no'
    storage_type_stg0 ='filesystem'
    image_size_stg0 = '1G'
    remove_image_stg0 = 'yes'
    nbd_export_format_stg0 = 'raw'
    nbd_port_stg0 = 10850

    # The following is specified for nbd image 'stg1',
    # i.e. the exported 'stg0', used for accessing the nbd image
    nbd_image_tag = 'stg1'
    nbd_port_stg1 = ${nbd_port_stg0}
    variants:
        - with_ncat:
            type = remote_image_ncat_access
            kill_vm = 'yes'
            cmds_installed_host += ' ncat'

            # ncat quits only if timeout
            errmsg_check = 'Idle timeout expired'
            nbd_export_writable = 'yes'
            image_format_stg1 = 'raw'
            variants:
                - with_inet:
                    ncat_cmd = 'ncat {localhost} ${nbd_port_stg1} -i 2'

                    # for tcp(type=inet) only
                    nbd_unix_socket = ''
                - with_socket:
                    # for socket(type=unix) only
                    nbd_server_stg0 = ''
                    nbd_server_stg1 = ''
                    nbd_unix_socket_stg0 = /var/run/nbd_${nbd_image_tag}.sock
                    nbd_unix_socket_stg1 = ${nbd_unix_socket_stg0}
                    ncat_cmd = 'ncat -U ${nbd_unix_socket_stg1} -i 2'
        - with_unix_socket:
            type = remote_image_unix_socket_access
            images += ' ${local_image_tag}'

            # for socket(type=unix) only
            nbd_server_stg0 = ''
            nbd_server_stg1 = ''
            nbd_unix_socket_stg0 = /var/run/nbd_${nbd_image_tag}.sock
            nbd_unix_socket_stg1 = ${nbd_unix_socket_stg0}
        - repeat_connection_with_unix_socket:
            type = nbd_unix_connection
            images = ${local_image_tag}
            start_vm = 'no'
            cmds_installed_host += ' nbdsh'

            # for socket(type=unix) only
            nbd_image_tag = 'stg0'
            nbd_unix_socket_stg0 = /var/run/nbd_${nbd_image_tag}.sock
            nbd_connect_cmd = "nbdsh -c 'h.connect_unix("${nbd_unix_socket_stg0}")'"
        - with_nmap:
            type = remote_image_nmap_access
            cmds_installed_host += ' nmap'
            images = ${local_image_tag}
            force_create_image_stg0 = 'yes'
            msg_check = '${nbd_port_stg0}/tcp open'
            nmap_cmd = 'nmap {localhost} -p ${nbd_port_stg1}'

            # for tcp(type=inet) only
            nbd_unix_socket = ''
        - with_qemu_io:
            type = remote_image_qemu_io_access
            images = ${local_image_tag}
            qemu_io_cmd = '{qemu_io} {tls_creds} {secret} {fmt} -c "{subcmd}" {filename}'
            variants:
                - drop_connection:
                    qemu_io_subcmd = 'quit'
                - drop_sync:
                    image_format_stg0 = 'raw'
                    image_format_stg1 = ${nbd_export_format_stg0}
                    nbd_export_name_stg0 = nbd_image_stg
                    nbd_export_name_stg1 = ${nbd_export_name_stg0}
                    create_description_cmd_stg0 = 'printf %02048d'
                    create_image_cmd_stg0 = 'echo "{desc}" > {filename}'
                    count_bytes = '100'
                    qemu_io_subcmd = 'read 0 ${count_bytes}'
                    msg_check = 'read ${count_bytes}/${count_bytes} bytes'
        - with_guestfish:
            only raw qcow2
            only Linux
            type = remote_image_guestfish_access
            start_vm = 'yes'
            kill_vm = 'yes'
            cmds_installed_host += ' guestfish'
            msg_check = 'Access image without booting up vm'
            guest_file_name = /tmp/guestfish.testfile
            write_cmd = 'export LIBGUESTFS_BACKEND=direct; guestfish --format={fmt} -a {uri} -i sh "echo ${msg_check} > ${guest_file_name}"'
            read_cmd = 'export LIBGUESTFS_BACKEND=direct; guestfish --format={fmt} -a {uri} -i sh "cat ${guest_file_name}"'
